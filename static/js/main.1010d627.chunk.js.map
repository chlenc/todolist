{"version":3,"sources":["components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["TextArea","Input","App","handleDelete","index","itemIndex","state","data","findIndex","val","i","saveToLocalStorageAndState","filter","_","map","v","key","showModal","setState","visible","handleAdd","formData","title","description","localStorage","setItem","JSON","stringify","getFromLocalStorage","storage","getItem","parse","handleCancel","columns","dataIndex","width","render","onClick","icon","type","ghost","this","className","expandedRowRender","record","style","margin","dataSource","pagination","position","bordered","onOk","onCancel","onChange","e","target","value","placeholder","autosize","minRows","maxRows","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1010d627.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Input, Modal, Table } from \"antd\";\nimport './styles.css'\nimport 'antd/dist/antd.css'\n\nconst {TextArea} = Input;\n\n\ninterface IdataItem {\n    key: number\n    title: string\n    description: string\n}\n\ninterface IProps {\n}\n\ntype TForm = {\n    title: string\n    description: string\n}\n\ninterface IState {\n    data: IdataItem[]\n    visible: boolean\n    formData: TForm\n}\n\nexport default class App extends React.Component<IProps, IState> {\n\n    componentDidMount(): void {\n        this.getFromLocalStorage();\n    }\n\n    handleDelete = (index: number) => {\n        const itemIndex = this.state.data.findIndex((val, i) => index === i);\n        if (itemIndex !== -1) {\n            this.saveToLocalStorageAndState(\n                {\n                    ...this.state,\n                    data: this.state.data.filter((_, i) => i ! - itemIndex).map((v, key) => ({...v, key}))\n                })\n        }\n    };\n\n    showModal = () => this.setState({visible: true});\n\n    handleAdd = () => {\n        this.saveToLocalStorageAndState({\n            visible: false,\n            data: [...this.state.data, this.state.formData].map((v, key) => ({...v, key})),\n            formData: {title: '', description: ''}\n        });\n    };\n\n    saveToLocalStorageAndState = (data: IState) => {\n        this.setState(data);\n        localStorage.setItem('todolistStorage', JSON.stringify(data))\n    };\n\n    getFromLocalStorage = () => {\n        const storage = localStorage.getItem('todolistStorage');\n        let state = this.state;\n        if (storage) {\n            state = {...state, ...JSON.parse(storage)}\n        }\n        this.setState(state)\n    };\n\n\n    handleCancel = () => this.setState({visible: false, formData: {title: '', description: ''}});\n\n    columns = [\n        {title: 'Title', dataIndex: 'title', key: 'title'},\n        {\n            title: 'Action',\n            dataIndex: '',\n            width: 100,\n            key: 'x',\n            render: ({key}: IdataItem) => <Button\n                onClick={() => this.handleDelete(key)}\n                icon=\"delete\"\n                type=\"danger\"\n                ghost\n            >\n                Delete\n            </Button>,\n        },\n    ];\n    state: IState = {\n        data: [],\n        visible: false,\n        formData: {\n            title: '',\n            description: ''\n        }\n    };\n\n\n    render() {\n        const {data, visible} = this.state;\n        let {formData} = this.state;\n        return <div className=\"root\">\n            <Button onClick={this.showModal} type=\"primary\" className=\"button\" icon=\"plus\">New task</Button>\n            <Table\n                className=\"table\"\n                columns={this.columns}\n                expandedRowRender={record => <p style={{margin: 0}}>{record.description}</p>}\n                dataSource={data}\n                pagination={{position: \"top\"}}\n                bordered\n            />\n            <Modal\n                title=\"Task form\"\n                visible={visible}\n                onOk={this.handleAdd}\n                onCancel={this.handleCancel}\n            >\n                <b>Input your task</b>\n                <TextArea\n                    onChange={e => this.setState({formData: {...this.state.formData, title: e.target.value}})}\n                    value={formData.title}\n                    className=\"input\"\n                    placeholder=\"Your title\"\n                    autosize\n                />\n                <TextArea\n                    onChange={e => this.setState({formData: {...this.state.formData, description: e.target.value}})}\n                    value={formData.description}\n                    placeholder=\"Your description\"\n                    autosize={{minRows: 3, maxRows: 5}}\n                />\n            </Modal>\n        </div>;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}